1. introduction

Since the dawn of the Internet, the amount of information available has been multipying every year.
With the increasing mass of data and growing complexity of its presentation it has become harder than ever to find collections of relevant information.

In the early days, people managed to extract infomation from the webpages manually, or by using simple ad-hoc scripts.
As the webpages got more complex and deep web got deeper, there an increasing need arised, for a system that could scrape data effectively.
These systems, precisely Web Data Extration Systems, have been developed using a number of different approaches, which resulted 
in a variety of advantages and disatvantages.

Need for extracting information derives from the fact that once extracted, the data can be handled in a way similar to insrances of a traditional database.

1.1 Challenges of Web Data Extraction
Q: not sure wher to put it
- human effort - provide a high degree of automation
- check for correctness (data consistency)
- ability to process large volumes of data
- ....
- maintainance - constant change of the web


In this thesis we will try to create such a system, that would be relatively lightweight, yet effective and would provide a good alernative to 
the expensive commercial solutions. Our main focus will be laid upon extensionaility and quick deployability, where we believe, it's possible to
get the edge against huge commetcial solutions. Alongside, we will try to point in some directions for the potential further development of the system.


This thesis will be structured as follows:
Chapter 1 defines the goal of the thesis and defines its structure.
Chapter 2 introduces taxonomy of the topic and describes the related work which gives rise to
Chapter 3 that describes our language Serrano whilst
Chapter 4 discusses the particular strong and weak points of it and compares it to the rivals whereas
Chapter 5 discusses real-world applications and clients that have used the project 
Q: there should I mention the clients? (avast, adblock, magneto,...) in the last chapter?
---------

DIFFERENCES:
Serrano scrapes data the user can see -> player extraction etc...
Does NOT need to navigate through pagination etc... login, ...

1.2 Related work



1.3 Our contribution

1.4 Organization of the work




In the first chapter I'm going to provide a quick review of (a)what challeges the web scraping faces and (b)how current solutions have been trying to tackle this.

1. chapter: Web Scraping, Introduction

Like in any useful program, it must have an input and an output.
In this case the input is a the requirement (i.e. what kind of information is to be extracted from where) and the output is the extracted information itself.
For receiving the correct output we will need something, that's called the web wrapper. We will use a definition from [webDataExtractionSurvey].

Definition 1 (Web wrapper). A procedure, that might implement one or many different classes of algorithms, which seeks and finds data required by a human user, extracting them from unstructured (or semi- structured) Web sources, and transforming them into structured data, merging and unifying this information for further processing, in a semi-automatic or fully automatic way.
 
